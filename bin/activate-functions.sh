# General Setup for .bashrc (which is .bash_profile on mac)
# Adding pathinfo to point back to this repo directory
# And sourcing out .bashrc (as .bash_profile)

function install_bashrc(){
    echo "# .bashrc installation"
    local URL=https://github.com/butuzov/dots
    local BASHRC=~/.bash_profile
    local bashrc=$(cat ~/.bash_profile | grep "$URL")

    if [[ ! -f $BASHRC || -z $bashrc ]]; then

        printf "\n# Next content added by \`./activate.sh\` from the" >> $BASHRC
        printf "\n# repository %s \n" $URL >> $BASHRC
        printf "\nDOTS_PATH=\"%s\"" $NWD >> $BASHRC
        printf "\nsource \"\${DOTS_PATH}/.bashrc\"\n" >> $BASHRC
        printf "\n# End of the autogenerated record \n" $URL >> $BASHRC
    fi
}

# Installs symbolic link to file in out repository
# Used to install multiple dotfiles from out repository
function install_dot(){
    TARGET=$1

    printf "# Installing %s\n" $TARGET

    local CREATE_LINK=0
    local LINK_MOVED=0

    if [[ -f ~/$TARGET && ! -h ~/$TARGET  ]]; then
        LINK_MOVED=1
        CREATE_LINK=1
    elif [[ -h ~/$TARGET && $(readlink ~/$TARGET) != $(pwd)/$TARGET ]]; then
        LINK_MOVED=1
        CREATE_LINK=1
    elif [[ ! -f ~/$TARGET ]]; then
        echo "ok?";
        CREATE_LINK=1
    else
        printf "## %s already installed\n" $TARGET
        return 0
    fi

    # Actually moving files
    if (( $LINK_MOVED == 1)); then
       printf "## backup of the %s created \n" $TARGET
       mv ~/$TARGET{,-backup_$(date +%Y-%m-%d)}
    fi

    if (( $CREATE_LINK == 1)); then
        printf "## link to %s created\n" $TARGET
        ln -s "$(pwd)/$TARGET" ~/$TARGET
    fi
}

# Install from git repository
function install_git_repository(){
    local DIRECTORY=$2
    local REPOSITORY=$1
    if [[ ! -d "${NWD}/${DIRECTORY}" ]]; then
      git clone $REPOSITORY "${NWD}/${DIRECTORY}" > /dev/null 2>&1
    fi
}

function install_php_tooling(){
    printf "\n\n# Installing PHP tooling\n\n"

    local DEV_TOOLS=(
        "phpunit|https://phar.phpunit.de/phpunit-7.phar"
        "phpmd|http://static.phpmd.org/php/latest/phpmd.phar"
        "composer|https://getcomposer.org/composer.phar"
        "phpcbf|https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar"
        "phpcs|https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar"
    )

    for tool in "${DEV_TOOLS[@]}" ; do
        local TOOL="${tool%%|*}"
        local URL="${tool##*|}"
        local exists="$(which $TOOL)"
        if [[ -z $exists ]]; then
            printf "=== PHPDevTooling : installing %s \n" $TOOL
            curl -Ls -o $TOOL $URL
            chmod +x $TOOL
            mv $TOOL /usr/local/bin/
        fi

        printf "## PHPDevTooling : %s installed (%s)\n" $TOOL  $(which $TOOL)
    done
}

# Installs common devops tools
function install_devops_tooling(){
    printf "# Installing DevOps Tooling\n\n"

    install_hashicorp_tooling

}

# (re)isntalls hasicorps tooling (except vagrant)
# install_hashicorp_tooling -uninstall   // uninstall everything
# install_hashicorp_tooling -reinstall   // reinstall everything
# install_hashicorp_tooling              // install everythin
function install_hashicorp_tooling(){
    printf "## Installing Hashicorp tooling\n"

    local ACTION=$1

    local HASHICORP_TOOLS=(
        "packer|https://www.packer.io/downloads.html"
        "consul|https://www.consul.io/downloads.html"
        "consul|https://www.consul.io/downloads.html"
        "nomad|https://www.nomadproject.io/downloads.html"
        "terraform|https://www.terraform.io/downloads.html"
    )

    for tool in "${HASHICORP_TOOLS[@]}" ; do
        local TOOL="${tool%%|*}"
        local URL="${tool##*|}"

        local exists="$(which $TOOL)"

        if [[ $ACTION = "-uninstall" || $ACTION = "-reinstall"  ]]; then

            if [[ ! -z $exists ]]; then
                unlink $exists
                exists=""
            fi

            if [[ $ACTION = "-uninstall" ]]; then
                printf "## HASHICORP_TOOLS : %s unstalled\n" $TOOL
            fi
        fi

        if [[ -z $exists && $ACTION != "-uninstall"  ]]; then
            printf "### HASHICORP_TOOLS : installing %s \n" $TOOL
            curl -sL $URL \
                | grep -Eoi '<a [^>]+\>'  \
                | grep -Eoi "https[^>]+darwin_amd64.zip" \
                | xargs curl -sL -o archive.zip
            unzip -q archive.zip -d /usr/local/bin/

            if [[ $ACTION = "-uninstall" ]]; then
                printf "### HASHICORP_TOOLS : %s reinstalled\n" $TOOL
            else
                printf "#### HASHICORP_TOOLS : %s installed (%s)\n" $TOOL $(which $TOOL)
            fi
        fi

        if [[ -f $(which $TOOL) && -z $ACTION ]]; then
            printf "### HASHICORP_TOOLS : %s installed (%s)\n" $TOOL $(which $TOOL)
        fi

    done
}
